import java.util.Scanner;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * Brutally copied the answer from
 * http://code.jasonbhill.com/sage/project-euler-problem-12/ I had a naive
 * approach, but of course it took ages. It is copied here because I want to
 * understand the math.
 * 
 * @author Rodrigo Weffer
 * 
 */
public class E12 {

	public static void main(String... args) {
		Scanner sc = new Scanner(System.in);
		E12 e = new E12();
		int n = Integer.parseInt(sc.nextLine());
		System.out.println(e.solve(n));
	}

	private long solve(int top) {
		long x = 0;
		int n = 1;
		int ld = findDividers(n);
		int rd = findDividers(n + 1);
		//Not sure I understand this...
		while(ld * rd < top){
			n++;
			//we have the factors of n
			ld = rd;
			//so only find factors for n + 1
			rd = findDividers(n + 1);
			x = n * (n + 1) / 2; 
			System.out.println("n: " + n + ", n + 1: " + (n + 1) + ", x: " + x);
			System.out.println("Divs: " + (ld * rd));
			System.out.println("------------------");
		}
		return x;
	}

	int findDividers(int n){
		//if even reduce to first odd  
	    if(n % 2 == 0)
	    	n >>= 1;
	    
	    int divisors = 1;
	    
	    //reduce the even numbers
	    while(n % 2 == 0){
	        divisors ++;
	        n >>= 1;
	    }
	    
	    // then reduce by 3, 5,...
	    int p = 3;
	    while(n != 1){
	        int count = 0;
	        while(n % p == 0){
	            count ++;
	            n = n/p;
	        }
	        // count by combinatorial
	        divisors = divisors * (count + 1);
	        // only the odd.
	        p += 2;
	    }
	    return divisors;
	}
}
