import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;

/**
 * Work out the first ten digits of the sum of the following one-hundred
 * 50-digit numbers.
 *                                                  
 * 149 149 148 135                                                   
 *  9    8   5   0                                         
 *          1         2         3         4         5
 *          
 *           
 * 12345678901 234 567890123456789012345678901234567890
 * 37107287533 902 102798797998220837590246510135740250
 * 46376937677 490 009712648124896970078050417018260538
 * 74324986199 524 741059474233309513058123726617309629
 * 91942213363 574 161572522430563301811072406154908250
 * 23067588207 539 346171171980310421047513778063246676
 * 89261670696 623 633820136378418383684178734361726757
 * 28112879812 849 979408065481931592621691275889832738
 * 44274228917 432 520321923589422876796487670272189318
 * 47451445736 001 306439091167216856844588711603153276
 * 70386486105 843 025439939619828917593665686757934951
 * 62176457141 856 560629502157223196586755079324193331
 * 64906352462 741 904929101432445813822663347944758178
 * 92575867718 337 217661963751590579239728245598838407
 * 58203565325 359 399008402633568948830189458628227828
 * 80181199384 826 282014278194139940567587151170094390
 * 35398664372 827 112653829987240784473053190104293586
 * 86515506006 295 864861532075273371959191420517255829
 * 71693888707 715 466499115593487603532921714970056938
 * 54370070576 826 684624621495650076471787294438377604
 * 53282654108 756 828443191190634694037855217779295145
 * 36123272525 000 296071075082563815656710885258350721
 * 45876576172 410 976447339110607218265236877223636045
 * 17423706905 851 860660448207621209813287860733969412
 * 81142660418 086 830619328460811191061556940512689692
 * 51934325451 728 388641918047049293215058642563049483
 * 62467221648 435 076201727918039944693004732956340691
 * 15732444386 908 125794514089057706229429197107928209
 * 55037687525 678 773091862540744969844508330393682126
 * 18336384825 330 154686196124348767681297534375946515
 * 80386287592 878 490201521685554828717201219257766954
 * 78182833757 993 103614740356856449095527097864797581
 * 16726320100 436 897842553539920931837441497806860984
 * 48403098129 077 791799088218795327364475675590848030
 * 87086987551 392 711854517078544161852424320693150332
 * 59959406895 756 536782107074926966537676326235447210
 * 69793950679 652 694742597709739166693763042633987085
 * 41052684708 299 085211399427365734116182760315001271
 * 65378607361 501 080857009149939512557028198746004375
 * 35829035317 434 717326932123578154982629742552737307
 * 94953759765 105 305946966067683156574377167401875275
 * 88902802571 733 229619176668713819931811048770190271
 * 25267680276 078 003013678680992525463401061632866526
 * 36270218540 497 705585629946580636237993140746255962
 * 24074486908 231 174977792365466257246923322810917141
 * 91430288197 103 288597806669760892938638285025333403
 * 34413065578 016 127815921815005561868836468420090470
 * 23053081172 816 430487623791969842487255036638784583
 * 11487696932 154 902810424020138335124462181441773470
 * 63783299490 636 259666498587618221225225512486764533
 * 67720186971 698 544312419572409913959008952310058822
 * 95548255300 263 520781532296796249481641953868218774
 * 76085327132 285 723110424803456124867697064507995236
 * 37774242535 411 291684276865538926205024910326572967
 * 23701913275 725 675285653248258265463092207058596522
 * 29798860272 258 331913126375147341994889534765745501
 * 18495701454 879 288984856827726077713721403798879715
 * 38298203783 031 473527721580348144513491373226651381
 * 34829543829 199 918180278916522431027392251122869539
 * 40957953066 405 232632538044100059654939159879593635
 * 29746152185 502 371307642255121183693803580388584903
 * 41698116222 072 977186158236678424689157993532961922
 * 62467957194 401 269043877107275048102390895523597457
 * 23189706772 547 915061505504953922979530901129967519
 * 86188088225 875 314529584099251203829009407770775672
 * 11306739708 304 724483816533873502340845647058077308
 * 82959174767 140 363198008187129011875491310547126581
 * 97623331044 818 386269515456334926366572897563400500
 * 42846280183 517 070527831839425882145521227251250327
 * 55121603546 981 200581762165212827652751691296897789
 * 32238195734 329 339946437501907836945765883352399886
 * 75506164965 184 775180738168837861091527357929701337
 * 62177842752 192 623401942399639168044983993173312731
 * 32924185707 147 349566916674687634660915035914677504
 * 99518671430 235  219628894890102423325116913619626622
 * 73267460800 591 547471830798392868535206946944540724
 * 76841822524 674 417161514036427982273348055556214818
 * 97142617910 342 598647204516893989422179826088076852
 * 87783646182 799 346313767754307809363333018982642090
 * 10848802521 674 670883215120185883543223812876952786
 * 71329612474 782 464538636993009049310363619763878039
 * 62184073572 399 794223406235393808339651327408011116
 * 66627891981 488 087797941876876144230030984490851411
 * 60661826293 682 836764744779239180335110989069790714
 * 85786944089 552 990653640447425576083659976645795096
 * 66024396409 905 389607120198219976047599490197230297
 * 64913982680 032 973156037120041377903785566085089252
 * 16730939319 872 750275468906903707539413042652315011
 * 94809377245 048 795150954100921645863754710598436791
 * 78639167021 187 492431995700641917969777599028300699
 * 15368713711 936 614952811305876380278410754449733078
 * 40789923115 535 562561142322423255033685442488917353
 * 44889911501 440 648020369068063960672322193204149535
 * 41503128880 339 536053299340368006977710650566631954
 * 81234880673 210 146739058568557934581403627822703280
 * 82616570773 948 327592232845941706525094512325230608
 * 22918802058 777 319719839450180888072429661980811197
 * 77158542502 016 545090413245809786882778948721859617
 * 72107838435 069 186155435662884062257473692284509516
 * 20849603980 134 001723930671666823555245252804609722
 * 53503534226 472 524250874054075591789781264330331690
 *   
 * @author Rodrigo Weffer
 * 
 * Solution: 5537376230
 * 
 */
public class E13 {

	String test = "5537376230";
	
	int maxCarry = 149; 
	List<String> largeNumbersStr;
	public static void main(String... args) throws IOException {
		Scanner sc = new Scanner(System.in);
		E13 e = new E13();
		int n = Integer.parseInt(sc.nextLine());
		e.largeNumbersStr = Files.readAllLines(
						Paths.get("E13.txt"),StandardCharsets.UTF_8);  

		System.out.println(e.solve(n));
	}

	private String cheating(int n) {
		BigInteger sum = BigInteger.ZERO;
		for(String s: largeNumbersStr){
			sum = sum.add(new BigInteger(s));
		}
		return sum.toString().substring(0,n);
	}
	
	private String solve(int top) {
		Long sum = 0l;
		int n = largeNumbersStr.get(0).length();
		Long last = -10000000000l;
		for( int i = top; i < n; i++){
			sum = 0l;
			for(String s: largeNumbersStr){
				sum += Long.valueOf(s.substring(0, i));
			}
			int base = (int) Math.ceil(Math.log10(sum));
			int leftover = base - top;
			long maxPossible = sum + maxCarry;
			maxPossible /= (long) Math.pow(10, leftover);
			
			if(maxPossible == last)
				return sum.toString().substring(0, 10);
			
			last = sum /= (long) Math.pow(10, leftover);
		}
		
		return sum.toString().substring(0, top);
	}
	
	private String explore(int top) {
		BigInteger sum = BigInteger.ZERO;
		for( int i = 10; i < 50; i++){
			sum = BigInteger.ZERO;
			for(String s: largeNumbersStr){
				sum = sum.add(new BigInteger(s.substring(0, i)));
			}
			if(sum.toString().substring(0, top).equals(test))
				System.out.println(sum);
		}
		
		return sum.toString().substring(0, top);
	}
}